tosca_definitions_version: tosca_simple_yaml_1_0

node_types:
  my.nodes.VM.OpenStack:
    derived_from: tosca.nodes.Compute
    properties:
      name:
        type: string
        description: Name that should be given to the VM in OpenStack
      image:
        type: string
        description: OpenStack image id (image names are not accepted)
      flavor:
        type: string
        description: OpenStack flavor id (flavor names are not accepted)
      network:
        type: string
        description: OpenStack network id (network names are not accepted)
      key_name:
        type: string
        description: OpenStack SSH key name that should be placed on the VM
    attributes:
      id:
        type: string
        description: OpenStack id of the VM
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        create:
          inputs:
            vm_name:  { default: { get_property: [ SELF, name     ] } }
            image:    { default: { get_property: [ SELF, image    ] } }
            flavor:   { default: { get_property: [ SELF, flavor   ] } }
            network:  { default: { get_property: [ SELF, network  ] } }
            key_name: { default: { get_property: [ SELF, key_name ] } }
          implementation: playbooks/vm/create.yml
        delete:
          inputs:
            id: { default: { get_attribute: [ SELF, id ] } }
          implementation: playbooks/vm/delete.yml

  my.nodes.database:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      db_name:
        type: string
        description: name of the database
      db_user:
        type: string
        description: User name of the database
      db_password:
        type: string
        description: password of the database
      host_ip_prop:
        type: string
        description: ip of the host machine
    attributes:
      host_ip_attr:
        type: string
        description: ip of the host where database is deployed
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        create:
          inputs:
            db_name:  { default: { get_property: [ SELF, db_name     ] } }
            db_user:   { default: { get_property: [ SELF, db_user   ] } }
            db_password:  { default: { get_property: [ SELF, db_password ] } }
          implementation: playbooks/db/installdbServr.yml
        # delete:
        #   inputs:
        #     id: { default: { get_attribute: [ SELF, id ] } }
        #   implementation: playbooks/vm/delete.yml
    requirements:
      - host:
          capability: tosca.capabilities.Compute
          relationship: my.relationships.databaseHosting

  my.nodes.Nginx:
    derived_from: tosca.nodes.SoftwareComponent
    attributes:
      site_config_dir:
        type: string
        description: Location of nginx site configs
      remote_host_ip:
        type: string
        description: Location of nginx site configs
    capabilities:
      host:
        type: tosca.capabilities.Compute
        valid_source_types: [my.nodes.Nginx.Site]
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        create:
          implementation:
            primary: playbooks/nginx/install.yml
        delete:
          implementation:
            primary: playbooks/nginx/uninstall.yml
  my.nodes.Nginx.loadBalancer:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      server1:
        type: string
        description: hostname to balance the load
      server2:
        type: string
        description: hostname to balance the load
    attributes:
      site_config_dir:
        type: string
        description: Location of nginx site configs
      remote_host_ip:
        type: string
        description: Location of nginx site configs
    capabilities:
      host:
        type: tosca.capabilities.Compute
        valid_source_types: [my.nodes.Nginx.Site]
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        create:
          inputs:
            server1: { default: { get_property: [ SELF, server1 ] } }
            server2: { default: { get_property: [ SELF, server2 ] } }
          implementation:
            primary: playbooks/lb/install.yml
        delete:
          implementation:
            primary: playbooks/lb/uninstall.yml

  my.nodes.Nginx.Site:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      hostname:
        type: string
        description: IP of the remote database
      database_port:
        type: string
        description: port of the remote database
      database_name:
        type: string
        description: name of the remote database
      database_username:
        type: string
        description: username to login
      database_password:
        type: string
        description: password to login remote database
      database_table:
        type: string
        description: table name to access
    requirements:
      - host:
          capability: tosca.capabilities.Compute
          relationship: my.relationships.NginxSiteHosting
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        create:
          inputs:
            hostname: { default: { get_property: [ SELF, hostname ] } }
            database_port: { default: { get_property: [ SELF, database_port ] } }
            database_name: { default: { get_property: [ SELF, database_name ] } }
            database_username: { default: { get_property: [ SELF, database_username ] } }
            database_password: { default: { get_property: [ SELF, database_password ] } }
            database_table: { default: { get_property: [ SELF, database_table ] } }
          implementation: playbooks/site/create.yml
        delete: playbooks/site/delete.yml




relationship_types:    
  my.relationships.NginxSiteHosting:
    derived_from: tosca.relationships.HostedOn
    valid_target_types: [my.nodes.Nginx]    
    interfaces:
      Configure:
        add_source:
          implementation:
            primary: playbooks/nginx/reload.yml


topology_template:
  node_templates:
    vm_loadBalancer:
      type: my.nodes.VM.OpenStack
      properties:
        name: nginx_LB
        image: d3eeb4ae-9b8c-49ed-8314-123a8a808b2b
        flavor: 6b254b9e-db1c-40de-994c-07d69dd732a6
        network: provider_64_net
        key_name: rem-VM2

    nginx-lb:
      type: my.nodes.Nginx.loadBalancer
      properties:
        server1: nginx_host1
        server2: nginx_host3
      requirements:
        - host: vm_loadBalancer

    vm1:
      type: my.nodes.VM.OpenStack
      properties:
        name: nginx_host1
        image: d3eeb4ae-9b8c-49ed-8314-123a8a808b2b
        flavor: 6b254b9e-db1c-40de-994c-07d69dd732a6
        network: provider_64_net
        key_name: rem-VM2

    vm2:
      type: my.nodes.VM.OpenStack
      properties:
        name: nginx_host2
        image: d3eeb4ae-9b8c-49ed-8314-123a8a808b2b
        flavor: 6b254b9e-db1c-40de-994c-07d69dd732a6
        network: provider_64_net
        key_name: rem-VM2
    
    nginx:
      type: my.nodes.Nginx
      requirements:
        - host: vm1

    site:
      type: my.nodes.Nginx.Site      
      properties:
            hostname: nginx_host2
            database_port: 5432
            database_name: database1
            database_username: centos
            database_password: centos
            database_table: table1  
      requirements:
        - host: nginx
        # - relationship: my.relationships.NginxSiteHosting
    
    dbserver1:
      type: my.nodes.database
      properties:
        db_name:  database1
        db_user:   centos
        db_password:  centos
      requirements:
        - host: vm2

    vm3:
      type: my.nodes.VM.OpenStack
      properties:
        name: nginx_host3
        image: d3eeb4ae-9b8c-49ed-8314-123a8a808b2b
        flavor: 6b254b9e-db1c-40de-994c-07d69dd732a6
        network: provider_64_net
        key_name: rem-VM2

    nginx2:
      type: my.nodes.Nginx
      requirements:
        - host: vm3

    site2:
      type: my.nodes.Nginx.Site      
      properties:
            hostname: nginx_host2
            database_port: 5432
            database_name: database1
            database_username: centos
            database_password: centos
            database_table: table1  
      requirements:
        - host: nginx2


